// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pborm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pborm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pborm {

namespace {

const ::google::protobuf::Descriptor* OrmMsgSelect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrmMsgSelect_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrmMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrmMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OrmMsgOP_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pborm_2eproto() {
  protobuf_AddDesc_pborm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pborm.proto");
  GOOGLE_CHECK(file != NULL);
  OrmMsgSelect_descriptor_ = file->message_type(0);
  static const int OrmMsgSelect_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrmMsgSelect, where_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrmMsgSelect, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrmMsgSelect, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrmMsgSelect, fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrmMsgSelect, order_),
  };
  OrmMsgSelect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrmMsgSelect_descriptor_,
      OrmMsgSelect::default_instance_,
      OrmMsgSelect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrmMsgSelect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrmMsgSelect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrmMsgSelect));
  OrmMsg_descriptor_ = file->message_type(1);
  static const int OrmMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrmMsg, msg_full_type_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrmMsg, msg_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrmMsg, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrmMsg, select_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrmMsg, cb_),
  };
  OrmMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrmMsg_descriptor_,
      OrmMsg::default_instance_,
      OrmMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrmMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrmMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrmMsg));
  OrmMsgOP_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pborm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrmMsgSelect_descriptor_, &OrmMsgSelect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrmMsg_descriptor_, &OrmMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pborm_2eproto() {
  delete OrmMsgSelect::default_instance_;
  delete OrmMsgSelect_reflection_;
  delete OrmMsg::default_instance_;
  delete OrmMsg_reflection_;
}

void protobuf_AddDesc_pborm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013pborm.proto\022\005pborm\"[\n\014OrmMsgSelect\022\r\n\005"
    "where\030\001 \001(\t\022\016\n\006offset\030\002 \001(\005\022\r\n\005limit\030\003 \001"
    "(\005\022\016\n\006fields\030\004 \001(\t\022\r\n\005order\030\005 \001(\005\"\204\001\n\006Or"
    "mMsg\022\032\n\022msg_full_type_name\030\001 \002(\t\022\020\n\010msg_"
    "data\030\002 \002(\014\022\033\n\002op\030\003 \002(\0162\017.pborm.OrmMsgOP\022"
    "#\n\006select\030\004 \001(\0132\023.pborm.OrmMsgSelect\022\n\n\002"
    "cb\030\005 \001(\014*j\n\010OrmMsgOP\022\017\n\013ORM_COMMAND\020\000\022\016\n"
    "\nORM_INSERT\020\001\022\016\n\nORM_DELETE\020\002\022\016\n\nORM_SEL"
    "ECT\020\003\022\016\n\nORM_UPDATE\020\004\022\r\n\tORM_COUNT\020\005", 356);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pborm.proto", &protobuf_RegisterTypes);
  OrmMsgSelect::default_instance_ = new OrmMsgSelect();
  OrmMsg::default_instance_ = new OrmMsg();
  OrmMsgSelect::default_instance_->InitAsDefaultInstance();
  OrmMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pborm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pborm_2eproto {
  StaticDescriptorInitializer_pborm_2eproto() {
    protobuf_AddDesc_pborm_2eproto();
  }
} static_descriptor_initializer_pborm_2eproto_;
const ::google::protobuf::EnumDescriptor* OrmMsgOP_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrmMsgOP_descriptor_;
}
bool OrmMsgOP_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int OrmMsgSelect::kWhereFieldNumber;
const int OrmMsgSelect::kOffsetFieldNumber;
const int OrmMsgSelect::kLimitFieldNumber;
const int OrmMsgSelect::kFieldsFieldNumber;
const int OrmMsgSelect::kOrderFieldNumber;
#endif  // !_MSC_VER

OrmMsgSelect::OrmMsgSelect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pborm.OrmMsgSelect)
}

void OrmMsgSelect::InitAsDefaultInstance() {
}

OrmMsgSelect::OrmMsgSelect(const OrmMsgSelect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pborm.OrmMsgSelect)
}

void OrmMsgSelect::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  where_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = 0;
  limit_ = 0;
  fields_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrmMsgSelect::~OrmMsgSelect() {
  // @@protoc_insertion_point(destructor:pborm.OrmMsgSelect)
  SharedDtor();
}

void OrmMsgSelect::SharedDtor() {
  if (where_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete where_;
  }
  if (fields_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fields_;
  }
  if (this != default_instance_) {
  }
}

void OrmMsgSelect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrmMsgSelect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrmMsgSelect_descriptor_;
}

const OrmMsgSelect& OrmMsgSelect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pborm_2eproto();
  return *default_instance_;
}

OrmMsgSelect* OrmMsgSelect::default_instance_ = NULL;

OrmMsgSelect* OrmMsgSelect::New() const {
  return new OrmMsgSelect;
}

void OrmMsgSelect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OrmMsgSelect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(offset_, limit_);
    if (has_where()) {
      if (where_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        where_->clear();
      }
    }
    if (has_fields()) {
      if (fields_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fields_->clear();
      }
    }
    order_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrmMsgSelect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pborm.OrmMsgSelect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string where = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_where()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->where().data(), this->where().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "where");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // optional int32 offset = 2;
      case 2: {
        if (tag == 16) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_limit;
        break;
      }

      // optional int32 limit = 3;
      case 3: {
        if (tag == 24) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fields;
        break;
      }

      // optional string fields = 4;
      case 4: {
        if (tag == 34) {
         parse_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fields()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fields().data(), this->fields().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fields");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_order;
        break;
      }

      // optional int32 order = 5;
      case 5: {
        if (tag == 40) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pborm.OrmMsgSelect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pborm.OrmMsgSelect)
  return false;
#undef DO_
}

void OrmMsgSelect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pborm.OrmMsgSelect)
  // optional string where = 1;
  if (has_where()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->where().data(), this->where().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "where");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->where(), output);
  }

  // optional int32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }

  // optional int32 limit = 3;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limit(), output);
  }

  // optional string fields = 4;
  if (has_fields()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fields().data(), this->fields().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fields");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fields(), output);
  }

  // optional int32 order = 5;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pborm.OrmMsgSelect)
}

::google::protobuf::uint8* OrmMsgSelect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pborm.OrmMsgSelect)
  // optional string where = 1;
  if (has_where()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->where().data(), this->where().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "where");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->where(), target);
  }

  // optional int32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }

  // optional int32 limit = 3;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limit(), target);
  }

  // optional string fields = 4;
  if (has_fields()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fields().data(), this->fields().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fields");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fields(), target);
  }

  // optional int32 order = 5;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pborm.OrmMsgSelect)
  return target;
}

int OrmMsgSelect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string where = 1;
    if (has_where()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->where());
    }

    // optional int32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional int32 limit = 3;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

    // optional string fields = 4;
    if (has_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fields());
    }

    // optional int32 order = 5;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrmMsgSelect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrmMsgSelect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrmMsgSelect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrmMsgSelect::MergeFrom(const OrmMsgSelect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_where()) {
      set_where(from.where());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_fields()) {
      set_fields(from.fields());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrmMsgSelect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrmMsgSelect::CopyFrom(const OrmMsgSelect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrmMsgSelect::IsInitialized() const {

  return true;
}

void OrmMsgSelect::Swap(OrmMsgSelect* other) {
  if (other != this) {
    std::swap(where_, other->where_);
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(fields_, other->fields_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrmMsgSelect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrmMsgSelect_descriptor_;
  metadata.reflection = OrmMsgSelect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrmMsg::kMsgFullTypeNameFieldNumber;
const int OrmMsg::kMsgDataFieldNumber;
const int OrmMsg::kOpFieldNumber;
const int OrmMsg::kSelectFieldNumber;
const int OrmMsg::kCbFieldNumber;
#endif  // !_MSC_VER

OrmMsg::OrmMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pborm.OrmMsg)
}

void OrmMsg::InitAsDefaultInstance() {
  select_ = const_cast< ::pborm::OrmMsgSelect*>(&::pborm::OrmMsgSelect::default_instance());
}

OrmMsg::OrmMsg(const OrmMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pborm.OrmMsg)
}

void OrmMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_full_type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_ = 0;
  select_ = NULL;
  cb_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrmMsg::~OrmMsg() {
  // @@protoc_insertion_point(destructor:pborm.OrmMsg)
  SharedDtor();
}

void OrmMsg::SharedDtor() {
  if (msg_full_type_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_full_type_name_;
  }
  if (msg_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_data_;
  }
  if (cb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cb_;
  }
  if (this != default_instance_) {
    delete select_;
  }
}

void OrmMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrmMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrmMsg_descriptor_;
}

const OrmMsg& OrmMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pborm_2eproto();
  return *default_instance_;
}

OrmMsg* OrmMsg::default_instance_ = NULL;

OrmMsg* OrmMsg::New() const {
  return new OrmMsg;
}

void OrmMsg::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_msg_full_type_name()) {
      if (msg_full_type_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_full_type_name_->clear();
      }
    }
    if (has_msg_data()) {
      if (msg_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_data_->clear();
      }
    }
    op_ = 0;
    if (has_select()) {
      if (select_ != NULL) select_->::pborm::OrmMsgSelect::Clear();
    }
    if (has_cb()) {
      if (cb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cb_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrmMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pborm.OrmMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msg_full_type_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_full_type_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg_full_type_name().data(), this->msg_full_type_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_full_type_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg_data;
        break;
      }

      // required bytes msg_data = 2;
      case 2: {
        if (tag == 18) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_op;
        break;
      }

      // required .pborm.OrmMsgOP op = 3;
      case 3: {
        if (tag == 24) {
         parse_op:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pborm::OrmMsgOP_IsValid(value)) {
            set_op(static_cast< ::pborm::OrmMsgOP >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_select;
        break;
      }

      // optional .pborm.OrmMsgSelect select = 4;
      case 4: {
        if (tag == 34) {
         parse_select:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_select()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cb;
        break;
      }

      // optional bytes cb = 5;
      case 5: {
        if (tag == 42) {
         parse_cb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cb()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pborm.OrmMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pborm.OrmMsg)
  return false;
#undef DO_
}

void OrmMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pborm.OrmMsg)
  // required string msg_full_type_name = 1;
  if (has_msg_full_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_full_type_name().data(), this->msg_full_type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_full_type_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg_full_type_name(), output);
  }

  // required bytes msg_data = 2;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msg_data(), output);
  }

  // required .pborm.OrmMsgOP op = 3;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->op(), output);
  }

  // optional .pborm.OrmMsgSelect select = 4;
  if (has_select()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->select(), output);
  }

  // optional bytes cb = 5;
  if (has_cb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->cb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pborm.OrmMsg)
}

::google::protobuf::uint8* OrmMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pborm.OrmMsg)
  // required string msg_full_type_name = 1;
  if (has_msg_full_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_full_type_name().data(), this->msg_full_type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_full_type_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg_full_type_name(), target);
  }

  // required bytes msg_data = 2;
  if (has_msg_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg_data(), target);
  }

  // required .pborm.OrmMsgOP op = 3;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->op(), target);
  }

  // optional .pborm.OrmMsgSelect select = 4;
  if (has_select()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->select(), target);
  }

  // optional bytes cb = 5;
  if (has_cb()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->cb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pborm.OrmMsg)
  return target;
}

int OrmMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string msg_full_type_name = 1;
    if (has_msg_full_type_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_full_type_name());
    }

    // required bytes msg_data = 2;
    if (has_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_data());
    }

    // required .pborm.OrmMsgOP op = 3;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }

    // optional .pborm.OrmMsgSelect select = 4;
    if (has_select()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->select());
    }

    // optional bytes cb = 5;
    if (has_cb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cb());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrmMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrmMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrmMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrmMsg::MergeFrom(const OrmMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_full_type_name()) {
      set_msg_full_type_name(from.msg_full_type_name());
    }
    if (from.has_msg_data()) {
      set_msg_data(from.msg_data());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_select()) {
      mutable_select()->::pborm::OrmMsgSelect::MergeFrom(from.select());
    }
    if (from.has_cb()) {
      set_cb(from.cb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrmMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrmMsg::CopyFrom(const OrmMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrmMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void OrmMsg::Swap(OrmMsg* other) {
  if (other != this) {
    std::swap(msg_full_type_name_, other->msg_full_type_name_);
    std::swap(msg_data_, other->msg_data_);
    std::swap(op_, other->op_);
    std::swap(select_, other->select_);
    std::swap(cb_, other->cb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrmMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrmMsg_descriptor_;
  metadata.reflection = OrmMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pborm

// @@protoc_insertion_point(global_scope)
