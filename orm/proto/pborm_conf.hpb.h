#pragma once

//this file is auto generated by (hbpex)[https://github.com/jj4jj/hpbex.git] , don't edit this file !
//file generate datetime: Wed Dec 16 16:54:05 2015

#include <algorithm>
#include "pborm_conf.pb.h"

namespace pborm { 


struct DBConf_ST {
    struct { char data[32]; }		ip;
    uint32_t		port;
    struct { char data[64]; }		sock;
    uint32_t		reconnect;
    struct { char data[8]; }		charset;
    uint32_t		autocommit;
    	
    //////////////member functions///////////////////////////////////
    void		construct() {
        if(sizeof(*this) < 1024) { memset(this,0,sizeof(*this)); return ;}
        ip.data[0] = 0;
        port = 0;
        sock.data[0] = 0;
        reconnect = 0;
        charset.data[0] = 0;
        autocommit = 0;
    }
    void		convto(DBConf & convtomsg_) const {
        convtomsg_.set_ip(ip.data);
        convtomsg_.set_port(port);
        convtomsg_.set_sock(sock.data);
        convtomsg_.set_reconnect(reconnect);
        convtomsg_.set_charset(charset.data);
        convtomsg_.set_autocommit(autocommit);
    }
    void		convfrom(const DBConf & convfrommsg_) {
        strncpy(ip.data, convfrommsg_.ip().data(), 32-1);
        port = convfrommsg_.port();
        strncpy(sock.data, convfrommsg_.sock().data(), 64-1);
        reconnect = convfrommsg_.reconnect();
        strncpy(charset.data, convfrommsg_.charset().data(), 8-1);
        autocommit = convfrommsg_.autocommit();
    }
    int		compare(const DBConf_ST & rhs_) const {
        int _cmp_ret = 0;
        _cmp_ret = strncmp(ip.data, rhs_.ip.data, 32);
        if (_cmp_ret != 0) { return _cmp_ret; }
        _cmp_ret = (port < rhs_.port) ? -1 : ((port == rhs_.port) ? 0 : 1);
        if (_cmp_ret != 0) { return _cmp_ret; }
        _cmp_ret = strncmp(sock.data, rhs_.sock.data, 64);
        if (_cmp_ret != 0) { return _cmp_ret; }
        _cmp_ret = (reconnect < rhs_.reconnect) ? -1 : ((reconnect == rhs_.reconnect) ? 0 : 1);
        if (_cmp_ret != 0) { return _cmp_ret; }
        _cmp_ret = strncmp(charset.data, rhs_.charset.data, 8);
        if (_cmp_ret != 0) { return _cmp_ret; }
        _cmp_ret = (autocommit < rhs_.autocommit) ? -1 : ((autocommit == rhs_.autocommit) ? 0 : 1);
        if (_cmp_ret != 0) { return _cmp_ret; }
        return 0;
    }
    bool		operator == (const DBConf_ST & rhs_) const {
        return this->compare(rhs_) == 0;
    }
    bool		operator < (const DBConf_ST & rhs_) const {
        return this->compare(rhs_) < 0;
    }
};
struct LogConf_ST {
    struct { char data[128]; }		path;
    struct { char data[8]; }		level;
    struct { char data[32]; }		file_pattern;
    uint32_t		max_roll;
    uint32_t		max_log_size;
    	
    //////////////member functions///////////////////////////////////
    void		construct() {
        if(sizeof(*this) < 1024) { memset(this,0,sizeof(*this)); return ;}
        path.data[0] = 0;
        level.data[0] = 0;
        file_pattern.data[0] = 0;
        max_roll = 0;
        max_log_size = 0;
    }
    void		convto(LogConf & convtomsg_) const {
        convtomsg_.set_path(path.data);
        convtomsg_.set_level(level.data);
        convtomsg_.set_file_pattern(file_pattern.data);
        convtomsg_.set_max_roll(max_roll);
        convtomsg_.set_max_log_size(max_log_size);
    }
    void		convfrom(const LogConf & convfrommsg_) {
        strncpy(path.data, convfrommsg_.path().data(), 128-1);
        strncpy(level.data, convfrommsg_.level().data(), 8-1);
        strncpy(file_pattern.data, convfrommsg_.file_pattern().data(), 32-1);
        max_roll = convfrommsg_.max_roll();
        max_log_size = convfrommsg_.max_log_size();
    }
    int		compare(const LogConf_ST & rhs_) const {
        int _cmp_ret = 0;
        _cmp_ret = strncmp(path.data, rhs_.path.data, 128);
        if (_cmp_ret != 0) { return _cmp_ret; }
        _cmp_ret = strncmp(level.data, rhs_.level.data, 8);
        if (_cmp_ret != 0) { return _cmp_ret; }
        _cmp_ret = strncmp(file_pattern.data, rhs_.file_pattern.data, 32);
        if (_cmp_ret != 0) { return _cmp_ret; }
        _cmp_ret = (max_roll < rhs_.max_roll) ? -1 : ((max_roll == rhs_.max_roll) ? 0 : 1);
        if (_cmp_ret != 0) { return _cmp_ret; }
        _cmp_ret = (max_log_size < rhs_.max_log_size) ? -1 : ((max_log_size == rhs_.max_log_size) ? 0 : 1);
        if (_cmp_ret != 0) { return _cmp_ret; }
        return 0;
    }
    bool		operator == (const LogConf_ST & rhs_) const {
        return this->compare(rhs_) == 0;
    }
    bool		operator < (const LogConf_ST & rhs_) const {
        return this->compare(rhs_) < 0;
    }
};
struct Config_ST {
    LogConf_ST		log;
    DBConf_ST		db;
    struct { char data[64]; }		meta_path;
    uint32_t		thread_num;
    	
    //////////////member functions///////////////////////////////////
    void		construct() {
        if(sizeof(*this) < 1024) { memset(this,0,sizeof(*this)); return ;}
        log.construct();
        db.construct();
        meta_path.data[0] = 0;
        thread_num = 0;
    }
    void		convto(Config & convtomsg_) const {
        log.convto(*convtomsg_.mutable_log());
        db.convto(*convtomsg_.mutable_db());
        convtomsg_.set_meta_path(meta_path.data);
        convtomsg_.set_thread_num(thread_num);
    }
    void		convfrom(const Config & convfrommsg_) {
        log.convfrom(convfrommsg_.log());
        db.convfrom(convfrommsg_.db());
        strncpy(meta_path.data, convfrommsg_.meta_path().data(), 64-1);
        thread_num = convfrommsg_.thread_num();
    }
    int		compare(const Config_ST & rhs_) const {
        int _cmp_ret = 0;
        _cmp_ret = log.compare(rhs_.log);
        if (_cmp_ret != 0) { return _cmp_ret; }
        _cmp_ret = db.compare(rhs_.db);
        if (_cmp_ret != 0) { return _cmp_ret; }
        _cmp_ret = strncmp(meta_path.data, rhs_.meta_path.data, 64);
        if (_cmp_ret != 0) { return _cmp_ret; }
        _cmp_ret = (thread_num < rhs_.thread_num) ? -1 : ((thread_num == rhs_.thread_num) ? 0 : 1);
        if (_cmp_ret != 0) { return _cmp_ret; }
        return 0;
    }
    bool		operator == (const Config_ST & rhs_) const {
        return this->compare(rhs_) == 0;
    }
    bool		operator < (const Config_ST & rhs_) const {
        return this->compare(rhs_) < 0;
    }
};

} // end of namespace: pborm

