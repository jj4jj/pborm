// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pborm_conf.proto

#ifndef PROTOBUF_pborm_5fconf_2eproto__INCLUDED
#define PROTOBUF_pborm_5fconf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "extensions.pb.h"
// @@protoc_insertion_point(includes)

namespace pborm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pborm_5fconf_2eproto();
void protobuf_AssignDesc_pborm_5fconf_2eproto();
void protobuf_ShutdownFile_pborm_5fconf_2eproto();

class LogConf;
class DBConf;
class ProcessConf;
class Config;

// ===================================================================

class LogConf : public ::google::protobuf::Message {
 public:
  LogConf();
  virtual ~LogConf();

  LogConf(const LogConf& from);

  inline LogConf& operator=(const LogConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogConf& default_instance();

  void Swap(LogConf* other);

  // implements Message ----------------------------------------------

  LogConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogConf& from);
  void MergeFrom(const LogConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1 [default = "./"];
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // optional string level = 2 [default = "TRACE"];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline const ::std::string& level() const;
  inline void set_level(const ::std::string& value);
  inline void set_level(const char* value);
  inline void set_level(const char* value, size_t size);
  inline ::std::string* mutable_level();
  inline ::std::string* release_level();
  inline void set_allocated_level(::std::string* level);

  // optional string file_pattern = 3 [default = "pborm.log"];
  inline bool has_file_pattern() const;
  inline void clear_file_pattern();
  static const int kFilePatternFieldNumber = 3;
  inline const ::std::string& file_pattern() const;
  inline void set_file_pattern(const ::std::string& value);
  inline void set_file_pattern(const char* value);
  inline void set_file_pattern(const char* value, size_t size);
  inline ::std::string* mutable_file_pattern();
  inline ::std::string* release_file_pattern();
  inline void set_allocated_file_pattern(::std::string* file_pattern);

  // optional uint32 max_roll = 4 [default = 20];
  inline bool has_max_roll() const;
  inline void clear_max_roll();
  static const int kMaxRollFieldNumber = 4;
  inline ::google::protobuf::uint32 max_roll() const;
  inline void set_max_roll(::google::protobuf::uint32 value);

  // optional uint32 max_file_size = 5 [default = 104857600];
  inline bool has_max_file_size() const;
  inline void clear_max_file_size();
  static const int kMaxFileSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 max_file_size() const;
  inline void set_max_file_size(::google::protobuf::uint32 value);

  // optional uint32 max_line_size = 6 [default = 1024000];
  inline bool has_max_line_size() const;
  inline void clear_max_line_size();
  static const int kMaxLineSizeFieldNumber = 6;
  inline ::google::protobuf::uint32 max_line_size() const;
  inline void set_max_line_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pborm.LogConf)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_file_pattern();
  inline void clear_has_file_pattern();
  inline void set_has_max_roll();
  inline void clear_has_max_roll();
  inline void set_has_max_file_size();
  inline void clear_has_max_file_size();
  inline void set_has_max_line_size();
  inline void clear_has_max_line_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_path_;
  ::std::string* path_;
  static ::std::string* _default_level_;
  ::std::string* level_;
  static ::std::string* _default_file_pattern_;
  ::std::string* file_pattern_;
  ::google::protobuf::uint32 max_roll_;
  ::google::protobuf::uint32 max_file_size_;
  ::google::protobuf::uint32 max_line_size_;
  friend void  protobuf_AddDesc_pborm_5fconf_2eproto();
  friend void protobuf_AssignDesc_pborm_5fconf_2eproto();
  friend void protobuf_ShutdownFile_pborm_5fconf_2eproto();

  void InitAsDefaultInstance();
  static LogConf* default_instance_;
};
// -------------------------------------------------------------------

class DBConf : public ::google::protobuf::Message {
 public:
  DBConf();
  virtual ~DBConf();

  DBConf(const DBConf& from);

  inline DBConf& operator=(const DBConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBConf& default_instance();

  void Swap(DBConf* other);

  // implements Message ----------------------------------------------

  DBConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBConf& from);
  void MergeFrom(const DBConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1 [default = "127.0.0.1"];
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 2 [default = 3306];
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional string sock = 3 [default = ""];
  inline bool has_sock() const;
  inline void clear_sock();
  static const int kSockFieldNumber = 3;
  inline const ::std::string& sock() const;
  inline void set_sock(const ::std::string& value);
  inline void set_sock(const char* value);
  inline void set_sock(const char* value, size_t size);
  inline ::std::string* mutable_sock();
  inline ::std::string* release_sock();
  inline void set_allocated_sock(::std::string* sock);

  // optional uint32 reconnect = 4 [default = 1];
  inline bool has_reconnect() const;
  inline void clear_reconnect();
  static const int kReconnectFieldNumber = 4;
  inline ::google::protobuf::uint32 reconnect() const;
  inline void set_reconnect(::google::protobuf::uint32 value);

  // optional string charset = 5 [default = "utf8"];
  inline bool has_charset() const;
  inline void clear_charset();
  static const int kCharsetFieldNumber = 5;
  inline const ::std::string& charset() const;
  inline void set_charset(const ::std::string& value);
  inline void set_charset(const char* value);
  inline void set_charset(const char* value, size_t size);
  inline ::std::string* mutable_charset();
  inline ::std::string* release_charset();
  inline void set_allocated_charset(::std::string* charset);

  // optional uint32 autocommit = 6 [default = 1];
  inline bool has_autocommit() const;
  inline void clear_autocommit();
  static const int kAutocommitFieldNumber = 6;
  inline ::google::protobuf::uint32 autocommit() const;
  inline void set_autocommit(::google::protobuf::uint32 value);

  // optional string uname = 7 [default = "gsgame"];
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 7;
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional string passwd = 8 [default = "gsgame"];
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 8;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:pborm.DBConf)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_sock();
  inline void clear_has_sock();
  inline void set_has_reconnect();
  inline void clear_has_reconnect();
  inline void set_has_charset();
  inline void clear_has_charset();
  inline void set_has_autocommit();
  inline void clear_has_autocommit();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_ip_;
  ::std::string* ip_;
  ::std::string* sock_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 reconnect_;
  static ::std::string* _default_charset_;
  ::std::string* charset_;
  static ::std::string* _default_uname_;
  ::std::string* uname_;
  static ::std::string* _default_passwd_;
  ::std::string* passwd_;
  ::google::protobuf::uint32 autocommit_;
  friend void  protobuf_AddDesc_pborm_5fconf_2eproto();
  friend void protobuf_AssignDesc_pborm_5fconf_2eproto();
  friend void protobuf_ShutdownFile_pborm_5fconf_2eproto();

  void InitAsDefaultInstance();
  static DBConf* default_instance_;
};
// -------------------------------------------------------------------

class ProcessConf : public ::google::protobuf::Message {
 public:
  ProcessConf();
  virtual ~ProcessConf();

  ProcessConf(const ProcessConf& from);

  inline ProcessConf& operator=(const ProcessConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessConf& default_instance();

  void Swap(ProcessConf* other);

  // implements Message ----------------------------------------------

  ProcessConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcessConf& from);
  void MergeFrom(const ProcessConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pidfile = 1 [default = "pborm.pid"];
  inline bool has_pidfile() const;
  inline void clear_pidfile();
  static const int kPidfileFieldNumber = 1;
  inline const ::std::string& pidfile() const;
  inline void set_pidfile(const ::std::string& value);
  inline void set_pidfile(const char* value);
  inline void set_pidfile(const char* value, size_t size);
  inline ::std::string* mutable_pidfile();
  inline ::std::string* release_pidfile();
  inline void set_allocated_pidfile(::std::string* pidfile);

  // optional uint32 daemon = 2 [default = 0];
  inline bool has_daemon() const;
  inline void clear_daemon();
  static const int kDaemonFieldNumber = 2;
  inline ::google::protobuf::uint32 daemon() const;
  inline void set_daemon(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pborm.ProcessConf)
 private:
  inline void set_has_pidfile();
  inline void clear_has_pidfile();
  inline void set_has_daemon();
  inline void clear_has_daemon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_pidfile_;
  ::std::string* pidfile_;
  ::google::protobuf::uint32 daemon_;
  friend void  protobuf_AddDesc_pborm_5fconf_2eproto();
  friend void protobuf_AssignDesc_pborm_5fconf_2eproto();
  friend void protobuf_ShutdownFile_pborm_5fconf_2eproto();

  void InitAsDefaultInstance();
  static ProcessConf* default_instance_;
};
// -------------------------------------------------------------------

class Config : public ::google::protobuf::Message {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  void Swap(Config* other);

  // implements Message ----------------------------------------------

  Config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pborm.LogConf log = 1;
  inline bool has_log() const;
  inline void clear_log();
  static const int kLogFieldNumber = 1;
  inline const ::pborm::LogConf& log() const;
  inline ::pborm::LogConf* mutable_log();
  inline ::pborm::LogConf* release_log();
  inline void set_allocated_log(::pborm::LogConf* log);

  // optional .pborm.DBConf db = 2;
  inline bool has_db() const;
  inline void clear_db();
  static const int kDbFieldNumber = 2;
  inline const ::pborm::DBConf& db() const;
  inline ::pborm::DBConf* mutable_db();
  inline ::pborm::DBConf* release_db();
  inline void set_allocated_db(::pborm::DBConf* db);

  // optional .pborm.ProcessConf process = 3;
  inline bool has_process() const;
  inline void clear_process();
  static const int kProcessFieldNumber = 3;
  inline const ::pborm::ProcessConf& process() const;
  inline ::pborm::ProcessConf* mutable_process();
  inline ::pborm::ProcessConf* release_process();
  inline void set_allocated_process(::pborm::ProcessConf* process);

  // optional string meta_path = 100 [default = "./proto"];
  inline bool has_meta_path() const;
  inline void clear_meta_path();
  static const int kMetaPathFieldNumber = 100;
  inline const ::std::string& meta_path() const;
  inline void set_meta_path(const ::std::string& value);
  inline void set_meta_path(const char* value);
  inline void set_meta_path(const char* value, size_t size);
  inline ::std::string* mutable_meta_path();
  inline ::std::string* release_meta_path();
  inline void set_allocated_meta_path(::std::string* meta_path);

  // optional uint32 thread_num = 101 [default = 4];
  inline bool has_thread_num() const;
  inline void clear_thread_num();
  static const int kThreadNumFieldNumber = 101;
  inline ::google::protobuf::uint32 thread_num() const;
  inline void set_thread_num(::google::protobuf::uint32 value);

  // optional string listen = 102 [default = "tcp://pull:127.0.0.1:8888"];
  inline bool has_listen() const;
  inline void clear_listen();
  static const int kListenFieldNumber = 102;
  inline const ::std::string& listen() const;
  inline void set_listen(const ::std::string& value);
  inline void set_listen(const char* value);
  inline void set_listen(const char* value, size_t size);
  inline ::std::string* mutable_listen();
  inline ::std::string* release_listen();
  inline void set_allocated_listen(::std::string* listen);

  // optional string meta_file = 103 [default = "test.proto"];
  inline bool has_meta_file() const;
  inline void clear_meta_file();
  static const int kMetaFileFieldNumber = 103;
  inline const ::std::string& meta_file() const;
  inline void set_meta_file(const ::std::string& value);
  inline void set_meta_file(const char* value);
  inline void set_meta_file(const char* value, size_t size);
  inline ::std::string* mutable_meta_file();
  inline ::std::string* release_meta_file();
  inline void set_allocated_meta_file(::std::string* meta_file);

  // @@protoc_insertion_point(class_scope:pborm.Config)
 private:
  inline void set_has_log();
  inline void clear_has_log();
  inline void set_has_db();
  inline void clear_has_db();
  inline void set_has_process();
  inline void clear_has_process();
  inline void set_has_meta_path();
  inline void clear_has_meta_path();
  inline void set_has_thread_num();
  inline void clear_has_thread_num();
  inline void set_has_listen();
  inline void clear_has_listen();
  inline void set_has_meta_file();
  inline void clear_has_meta_file();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pborm::LogConf* log_;
  ::pborm::DBConf* db_;
  ::pborm::ProcessConf* process_;
  static ::std::string* _default_meta_path_;
  ::std::string* meta_path_;
  static ::std::string* _default_listen_;
  ::std::string* listen_;
  static ::std::string* _default_meta_file_;
  ::std::string* meta_file_;
  ::google::protobuf::uint32 thread_num_;
  friend void  protobuf_AddDesc_pborm_5fconf_2eproto();
  friend void protobuf_AssignDesc_pborm_5fconf_2eproto();
  friend void protobuf_ShutdownFile_pborm_5fconf_2eproto();

  void InitAsDefaultInstance();
  static Config* default_instance_;
};
// ===================================================================


// ===================================================================

// LogConf

// optional string path = 1 [default = "./"];
inline bool LogConf::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogConf::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogConf::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogConf::clear_path() {
  if (path_ != _default_path_) {
    path_->assign(*_default_path_);
  }
  clear_has_path();
}
inline const ::std::string& LogConf::path() const {
  // @@protoc_insertion_point(field_get:pborm.LogConf.path)
  return *path_;
}
inline void LogConf::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == _default_path_) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:pborm.LogConf.path)
}
inline void LogConf::set_path(const char* value) {
  set_has_path();
  if (path_ == _default_path_) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:pborm.LogConf.path)
}
inline void LogConf::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == _default_path_) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pborm.LogConf.path)
}
inline ::std::string* LogConf::mutable_path() {
  set_has_path();
  if (path_ == _default_path_) {
    path_ = new ::std::string(*_default_path_);
  }
  // @@protoc_insertion_point(field_mutable:pborm.LogConf.path)
  return path_;
}
inline ::std::string* LogConf::release_path() {
  clear_has_path();
  if (path_ == _default_path_) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(_default_path_);
    return temp;
  }
}
inline void LogConf::set_allocated_path(::std::string* path) {
  if (path_ != _default_path_) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(_default_path_);
  }
  // @@protoc_insertion_point(field_set_allocated:pborm.LogConf.path)
}

// optional string level = 2 [default = "TRACE"];
inline bool LogConf::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogConf::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogConf::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogConf::clear_level() {
  if (level_ != _default_level_) {
    level_->assign(*_default_level_);
  }
  clear_has_level();
}
inline const ::std::string& LogConf::level() const {
  // @@protoc_insertion_point(field_get:pborm.LogConf.level)
  return *level_;
}
inline void LogConf::set_level(const ::std::string& value) {
  set_has_level();
  if (level_ == _default_level_) {
    level_ = new ::std::string;
  }
  level_->assign(value);
  // @@protoc_insertion_point(field_set:pborm.LogConf.level)
}
inline void LogConf::set_level(const char* value) {
  set_has_level();
  if (level_ == _default_level_) {
    level_ = new ::std::string;
  }
  level_->assign(value);
  // @@protoc_insertion_point(field_set_char:pborm.LogConf.level)
}
inline void LogConf::set_level(const char* value, size_t size) {
  set_has_level();
  if (level_ == _default_level_) {
    level_ = new ::std::string;
  }
  level_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pborm.LogConf.level)
}
inline ::std::string* LogConf::mutable_level() {
  set_has_level();
  if (level_ == _default_level_) {
    level_ = new ::std::string(*_default_level_);
  }
  // @@protoc_insertion_point(field_mutable:pborm.LogConf.level)
  return level_;
}
inline ::std::string* LogConf::release_level() {
  clear_has_level();
  if (level_ == _default_level_) {
    return NULL;
  } else {
    ::std::string* temp = level_;
    level_ = const_cast< ::std::string*>(_default_level_);
    return temp;
  }
}
inline void LogConf::set_allocated_level(::std::string* level) {
  if (level_ != _default_level_) {
    delete level_;
  }
  if (level) {
    set_has_level();
    level_ = level;
  } else {
    clear_has_level();
    level_ = const_cast< ::std::string*>(_default_level_);
  }
  // @@protoc_insertion_point(field_set_allocated:pborm.LogConf.level)
}

// optional string file_pattern = 3 [default = "pborm.log"];
inline bool LogConf::has_file_pattern() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogConf::set_has_file_pattern() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogConf::clear_has_file_pattern() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogConf::clear_file_pattern() {
  if (file_pattern_ != _default_file_pattern_) {
    file_pattern_->assign(*_default_file_pattern_);
  }
  clear_has_file_pattern();
}
inline const ::std::string& LogConf::file_pattern() const {
  // @@protoc_insertion_point(field_get:pborm.LogConf.file_pattern)
  return *file_pattern_;
}
inline void LogConf::set_file_pattern(const ::std::string& value) {
  set_has_file_pattern();
  if (file_pattern_ == _default_file_pattern_) {
    file_pattern_ = new ::std::string;
  }
  file_pattern_->assign(value);
  // @@protoc_insertion_point(field_set:pborm.LogConf.file_pattern)
}
inline void LogConf::set_file_pattern(const char* value) {
  set_has_file_pattern();
  if (file_pattern_ == _default_file_pattern_) {
    file_pattern_ = new ::std::string;
  }
  file_pattern_->assign(value);
  // @@protoc_insertion_point(field_set_char:pborm.LogConf.file_pattern)
}
inline void LogConf::set_file_pattern(const char* value, size_t size) {
  set_has_file_pattern();
  if (file_pattern_ == _default_file_pattern_) {
    file_pattern_ = new ::std::string;
  }
  file_pattern_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pborm.LogConf.file_pattern)
}
inline ::std::string* LogConf::mutable_file_pattern() {
  set_has_file_pattern();
  if (file_pattern_ == _default_file_pattern_) {
    file_pattern_ = new ::std::string(*_default_file_pattern_);
  }
  // @@protoc_insertion_point(field_mutable:pborm.LogConf.file_pattern)
  return file_pattern_;
}
inline ::std::string* LogConf::release_file_pattern() {
  clear_has_file_pattern();
  if (file_pattern_ == _default_file_pattern_) {
    return NULL;
  } else {
    ::std::string* temp = file_pattern_;
    file_pattern_ = const_cast< ::std::string*>(_default_file_pattern_);
    return temp;
  }
}
inline void LogConf::set_allocated_file_pattern(::std::string* file_pattern) {
  if (file_pattern_ != _default_file_pattern_) {
    delete file_pattern_;
  }
  if (file_pattern) {
    set_has_file_pattern();
    file_pattern_ = file_pattern;
  } else {
    clear_has_file_pattern();
    file_pattern_ = const_cast< ::std::string*>(_default_file_pattern_);
  }
  // @@protoc_insertion_point(field_set_allocated:pborm.LogConf.file_pattern)
}

// optional uint32 max_roll = 4 [default = 20];
inline bool LogConf::has_max_roll() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogConf::set_has_max_roll() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogConf::clear_has_max_roll() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogConf::clear_max_roll() {
  max_roll_ = 20u;
  clear_has_max_roll();
}
inline ::google::protobuf::uint32 LogConf::max_roll() const {
  // @@protoc_insertion_point(field_get:pborm.LogConf.max_roll)
  return max_roll_;
}
inline void LogConf::set_max_roll(::google::protobuf::uint32 value) {
  set_has_max_roll();
  max_roll_ = value;
  // @@protoc_insertion_point(field_set:pborm.LogConf.max_roll)
}

// optional uint32 max_file_size = 5 [default = 104857600];
inline bool LogConf::has_max_file_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogConf::set_has_max_file_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogConf::clear_has_max_file_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogConf::clear_max_file_size() {
  max_file_size_ = 104857600u;
  clear_has_max_file_size();
}
inline ::google::protobuf::uint32 LogConf::max_file_size() const {
  // @@protoc_insertion_point(field_get:pborm.LogConf.max_file_size)
  return max_file_size_;
}
inline void LogConf::set_max_file_size(::google::protobuf::uint32 value) {
  set_has_max_file_size();
  max_file_size_ = value;
  // @@protoc_insertion_point(field_set:pborm.LogConf.max_file_size)
}

// optional uint32 max_line_size = 6 [default = 1024000];
inline bool LogConf::has_max_line_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogConf::set_has_max_line_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogConf::clear_has_max_line_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogConf::clear_max_line_size() {
  max_line_size_ = 1024000u;
  clear_has_max_line_size();
}
inline ::google::protobuf::uint32 LogConf::max_line_size() const {
  // @@protoc_insertion_point(field_get:pborm.LogConf.max_line_size)
  return max_line_size_;
}
inline void LogConf::set_max_line_size(::google::protobuf::uint32 value) {
  set_has_max_line_size();
  max_line_size_ = value;
  // @@protoc_insertion_point(field_set:pborm.LogConf.max_line_size)
}

// -------------------------------------------------------------------

// DBConf

// optional string ip = 1 [default = "127.0.0.1"];
inline bool DBConf::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBConf::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBConf::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBConf::clear_ip() {
  if (ip_ != _default_ip_) {
    ip_->assign(*_default_ip_);
  }
  clear_has_ip();
}
inline const ::std::string& DBConf::ip() const {
  // @@protoc_insertion_point(field_get:pborm.DBConf.ip)
  return *ip_;
}
inline void DBConf::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == _default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:pborm.DBConf.ip)
}
inline void DBConf::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == _default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:pborm.DBConf.ip)
}
inline void DBConf::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == _default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pborm.DBConf.ip)
}
inline ::std::string* DBConf::mutable_ip() {
  set_has_ip();
  if (ip_ == _default_ip_) {
    ip_ = new ::std::string(*_default_ip_);
  }
  // @@protoc_insertion_point(field_mutable:pborm.DBConf.ip)
  return ip_;
}
inline ::std::string* DBConf::release_ip() {
  clear_has_ip();
  if (ip_ == _default_ip_) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(_default_ip_);
    return temp;
  }
}
inline void DBConf::set_allocated_ip(::std::string* ip) {
  if (ip_ != _default_ip_) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(_default_ip_);
  }
  // @@protoc_insertion_point(field_set_allocated:pborm.DBConf.ip)
}

// optional uint32 port = 2 [default = 3306];
inline bool DBConf::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBConf::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBConf::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBConf::clear_port() {
  port_ = 3306u;
  clear_has_port();
}
inline ::google::protobuf::uint32 DBConf::port() const {
  // @@protoc_insertion_point(field_get:pborm.DBConf.port)
  return port_;
}
inline void DBConf::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:pborm.DBConf.port)
}

// optional string sock = 3 [default = ""];
inline bool DBConf::has_sock() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DBConf::set_has_sock() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DBConf::clear_has_sock() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DBConf::clear_sock() {
  if (sock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sock_->clear();
  }
  clear_has_sock();
}
inline const ::std::string& DBConf::sock() const {
  // @@protoc_insertion_point(field_get:pborm.DBConf.sock)
  return *sock_;
}
inline void DBConf::set_sock(const ::std::string& value) {
  set_has_sock();
  if (sock_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sock_ = new ::std::string;
  }
  sock_->assign(value);
  // @@protoc_insertion_point(field_set:pborm.DBConf.sock)
}
inline void DBConf::set_sock(const char* value) {
  set_has_sock();
  if (sock_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sock_ = new ::std::string;
  }
  sock_->assign(value);
  // @@protoc_insertion_point(field_set_char:pborm.DBConf.sock)
}
inline void DBConf::set_sock(const char* value, size_t size) {
  set_has_sock();
  if (sock_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sock_ = new ::std::string;
  }
  sock_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pborm.DBConf.sock)
}
inline ::std::string* DBConf::mutable_sock() {
  set_has_sock();
  if (sock_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sock_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pborm.DBConf.sock)
  return sock_;
}
inline ::std::string* DBConf::release_sock() {
  clear_has_sock();
  if (sock_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sock_;
    sock_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DBConf::set_allocated_sock(::std::string* sock) {
  if (sock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sock_;
  }
  if (sock) {
    set_has_sock();
    sock_ = sock;
  } else {
    clear_has_sock();
    sock_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pborm.DBConf.sock)
}

// optional uint32 reconnect = 4 [default = 1];
inline bool DBConf::has_reconnect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DBConf::set_has_reconnect() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DBConf::clear_has_reconnect() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DBConf::clear_reconnect() {
  reconnect_ = 1u;
  clear_has_reconnect();
}
inline ::google::protobuf::uint32 DBConf::reconnect() const {
  // @@protoc_insertion_point(field_get:pborm.DBConf.reconnect)
  return reconnect_;
}
inline void DBConf::set_reconnect(::google::protobuf::uint32 value) {
  set_has_reconnect();
  reconnect_ = value;
  // @@protoc_insertion_point(field_set:pborm.DBConf.reconnect)
}

// optional string charset = 5 [default = "utf8"];
inline bool DBConf::has_charset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DBConf::set_has_charset() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DBConf::clear_has_charset() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DBConf::clear_charset() {
  if (charset_ != _default_charset_) {
    charset_->assign(*_default_charset_);
  }
  clear_has_charset();
}
inline const ::std::string& DBConf::charset() const {
  // @@protoc_insertion_point(field_get:pborm.DBConf.charset)
  return *charset_;
}
inline void DBConf::set_charset(const ::std::string& value) {
  set_has_charset();
  if (charset_ == _default_charset_) {
    charset_ = new ::std::string;
  }
  charset_->assign(value);
  // @@protoc_insertion_point(field_set:pborm.DBConf.charset)
}
inline void DBConf::set_charset(const char* value) {
  set_has_charset();
  if (charset_ == _default_charset_) {
    charset_ = new ::std::string;
  }
  charset_->assign(value);
  // @@protoc_insertion_point(field_set_char:pborm.DBConf.charset)
}
inline void DBConf::set_charset(const char* value, size_t size) {
  set_has_charset();
  if (charset_ == _default_charset_) {
    charset_ = new ::std::string;
  }
  charset_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pborm.DBConf.charset)
}
inline ::std::string* DBConf::mutable_charset() {
  set_has_charset();
  if (charset_ == _default_charset_) {
    charset_ = new ::std::string(*_default_charset_);
  }
  // @@protoc_insertion_point(field_mutable:pborm.DBConf.charset)
  return charset_;
}
inline ::std::string* DBConf::release_charset() {
  clear_has_charset();
  if (charset_ == _default_charset_) {
    return NULL;
  } else {
    ::std::string* temp = charset_;
    charset_ = const_cast< ::std::string*>(_default_charset_);
    return temp;
  }
}
inline void DBConf::set_allocated_charset(::std::string* charset) {
  if (charset_ != _default_charset_) {
    delete charset_;
  }
  if (charset) {
    set_has_charset();
    charset_ = charset;
  } else {
    clear_has_charset();
    charset_ = const_cast< ::std::string*>(_default_charset_);
  }
  // @@protoc_insertion_point(field_set_allocated:pborm.DBConf.charset)
}

// optional uint32 autocommit = 6 [default = 1];
inline bool DBConf::has_autocommit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DBConf::set_has_autocommit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DBConf::clear_has_autocommit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DBConf::clear_autocommit() {
  autocommit_ = 1u;
  clear_has_autocommit();
}
inline ::google::protobuf::uint32 DBConf::autocommit() const {
  // @@protoc_insertion_point(field_get:pborm.DBConf.autocommit)
  return autocommit_;
}
inline void DBConf::set_autocommit(::google::protobuf::uint32 value) {
  set_has_autocommit();
  autocommit_ = value;
  // @@protoc_insertion_point(field_set:pborm.DBConf.autocommit)
}

// optional string uname = 7 [default = "gsgame"];
inline bool DBConf::has_uname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DBConf::set_has_uname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DBConf::clear_has_uname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DBConf::clear_uname() {
  if (uname_ != _default_uname_) {
    uname_->assign(*_default_uname_);
  }
  clear_has_uname();
}
inline const ::std::string& DBConf::uname() const {
  // @@protoc_insertion_point(field_get:pborm.DBConf.uname)
  return *uname_;
}
inline void DBConf::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == _default_uname_) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pborm.DBConf.uname)
}
inline void DBConf::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == _default_uname_) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pborm.DBConf.uname)
}
inline void DBConf::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == _default_uname_) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pborm.DBConf.uname)
}
inline ::std::string* DBConf::mutable_uname() {
  set_has_uname();
  if (uname_ == _default_uname_) {
    uname_ = new ::std::string(*_default_uname_);
  }
  // @@protoc_insertion_point(field_mutable:pborm.DBConf.uname)
  return uname_;
}
inline ::std::string* DBConf::release_uname() {
  clear_has_uname();
  if (uname_ == _default_uname_) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(_default_uname_);
    return temp;
  }
}
inline void DBConf::set_allocated_uname(::std::string* uname) {
  if (uname_ != _default_uname_) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(_default_uname_);
  }
  // @@protoc_insertion_point(field_set_allocated:pborm.DBConf.uname)
}

// optional string passwd = 8 [default = "gsgame"];
inline bool DBConf::has_passwd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DBConf::set_has_passwd() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DBConf::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DBConf::clear_passwd() {
  if (passwd_ != _default_passwd_) {
    passwd_->assign(*_default_passwd_);
  }
  clear_has_passwd();
}
inline const ::std::string& DBConf::passwd() const {
  // @@protoc_insertion_point(field_get:pborm.DBConf.passwd)
  return *passwd_;
}
inline void DBConf::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == _default_passwd_) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:pborm.DBConf.passwd)
}
inline void DBConf::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == _default_passwd_) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:pborm.DBConf.passwd)
}
inline void DBConf::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == _default_passwd_) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pborm.DBConf.passwd)
}
inline ::std::string* DBConf::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == _default_passwd_) {
    passwd_ = new ::std::string(*_default_passwd_);
  }
  // @@protoc_insertion_point(field_mutable:pborm.DBConf.passwd)
  return passwd_;
}
inline ::std::string* DBConf::release_passwd() {
  clear_has_passwd();
  if (passwd_ == _default_passwd_) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(_default_passwd_);
    return temp;
  }
}
inline void DBConf::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != _default_passwd_) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(_default_passwd_);
  }
  // @@protoc_insertion_point(field_set_allocated:pborm.DBConf.passwd)
}

// -------------------------------------------------------------------

// ProcessConf

// optional string pidfile = 1 [default = "pborm.pid"];
inline bool ProcessConf::has_pidfile() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessConf::set_has_pidfile() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcessConf::clear_has_pidfile() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcessConf::clear_pidfile() {
  if (pidfile_ != _default_pidfile_) {
    pidfile_->assign(*_default_pidfile_);
  }
  clear_has_pidfile();
}
inline const ::std::string& ProcessConf::pidfile() const {
  // @@protoc_insertion_point(field_get:pborm.ProcessConf.pidfile)
  return *pidfile_;
}
inline void ProcessConf::set_pidfile(const ::std::string& value) {
  set_has_pidfile();
  if (pidfile_ == _default_pidfile_) {
    pidfile_ = new ::std::string;
  }
  pidfile_->assign(value);
  // @@protoc_insertion_point(field_set:pborm.ProcessConf.pidfile)
}
inline void ProcessConf::set_pidfile(const char* value) {
  set_has_pidfile();
  if (pidfile_ == _default_pidfile_) {
    pidfile_ = new ::std::string;
  }
  pidfile_->assign(value);
  // @@protoc_insertion_point(field_set_char:pborm.ProcessConf.pidfile)
}
inline void ProcessConf::set_pidfile(const char* value, size_t size) {
  set_has_pidfile();
  if (pidfile_ == _default_pidfile_) {
    pidfile_ = new ::std::string;
  }
  pidfile_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pborm.ProcessConf.pidfile)
}
inline ::std::string* ProcessConf::mutable_pidfile() {
  set_has_pidfile();
  if (pidfile_ == _default_pidfile_) {
    pidfile_ = new ::std::string(*_default_pidfile_);
  }
  // @@protoc_insertion_point(field_mutable:pborm.ProcessConf.pidfile)
  return pidfile_;
}
inline ::std::string* ProcessConf::release_pidfile() {
  clear_has_pidfile();
  if (pidfile_ == _default_pidfile_) {
    return NULL;
  } else {
    ::std::string* temp = pidfile_;
    pidfile_ = const_cast< ::std::string*>(_default_pidfile_);
    return temp;
  }
}
inline void ProcessConf::set_allocated_pidfile(::std::string* pidfile) {
  if (pidfile_ != _default_pidfile_) {
    delete pidfile_;
  }
  if (pidfile) {
    set_has_pidfile();
    pidfile_ = pidfile;
  } else {
    clear_has_pidfile();
    pidfile_ = const_cast< ::std::string*>(_default_pidfile_);
  }
  // @@protoc_insertion_point(field_set_allocated:pborm.ProcessConf.pidfile)
}

// optional uint32 daemon = 2 [default = 0];
inline bool ProcessConf::has_daemon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessConf::set_has_daemon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProcessConf::clear_has_daemon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProcessConf::clear_daemon() {
  daemon_ = 0u;
  clear_has_daemon();
}
inline ::google::protobuf::uint32 ProcessConf::daemon() const {
  // @@protoc_insertion_point(field_get:pborm.ProcessConf.daemon)
  return daemon_;
}
inline void ProcessConf::set_daemon(::google::protobuf::uint32 value) {
  set_has_daemon();
  daemon_ = value;
  // @@protoc_insertion_point(field_set:pborm.ProcessConf.daemon)
}

// -------------------------------------------------------------------

// Config

// optional .pborm.LogConf log = 1;
inline bool Config::has_log() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config::set_has_log() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config::clear_has_log() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config::clear_log() {
  if (log_ != NULL) log_->::pborm::LogConf::Clear();
  clear_has_log();
}
inline const ::pborm::LogConf& Config::log() const {
  // @@protoc_insertion_point(field_get:pborm.Config.log)
  return log_ != NULL ? *log_ : *default_instance_->log_;
}
inline ::pborm::LogConf* Config::mutable_log() {
  set_has_log();
  if (log_ == NULL) log_ = new ::pborm::LogConf;
  // @@protoc_insertion_point(field_mutable:pborm.Config.log)
  return log_;
}
inline ::pborm::LogConf* Config::release_log() {
  clear_has_log();
  ::pborm::LogConf* temp = log_;
  log_ = NULL;
  return temp;
}
inline void Config::set_allocated_log(::pborm::LogConf* log) {
  delete log_;
  log_ = log;
  if (log) {
    set_has_log();
  } else {
    clear_has_log();
  }
  // @@protoc_insertion_point(field_set_allocated:pborm.Config.log)
}

// optional .pborm.DBConf db = 2;
inline bool Config::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config::clear_db() {
  if (db_ != NULL) db_->::pborm::DBConf::Clear();
  clear_has_db();
}
inline const ::pborm::DBConf& Config::db() const {
  // @@protoc_insertion_point(field_get:pborm.Config.db)
  return db_ != NULL ? *db_ : *default_instance_->db_;
}
inline ::pborm::DBConf* Config::mutable_db() {
  set_has_db();
  if (db_ == NULL) db_ = new ::pborm::DBConf;
  // @@protoc_insertion_point(field_mutable:pborm.Config.db)
  return db_;
}
inline ::pborm::DBConf* Config::release_db() {
  clear_has_db();
  ::pborm::DBConf* temp = db_;
  db_ = NULL;
  return temp;
}
inline void Config::set_allocated_db(::pborm::DBConf* db) {
  delete db_;
  db_ = db;
  if (db) {
    set_has_db();
  } else {
    clear_has_db();
  }
  // @@protoc_insertion_point(field_set_allocated:pborm.Config.db)
}

// optional .pborm.ProcessConf process = 3;
inline bool Config::has_process() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Config::set_has_process() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Config::clear_has_process() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Config::clear_process() {
  if (process_ != NULL) process_->::pborm::ProcessConf::Clear();
  clear_has_process();
}
inline const ::pborm::ProcessConf& Config::process() const {
  // @@protoc_insertion_point(field_get:pborm.Config.process)
  return process_ != NULL ? *process_ : *default_instance_->process_;
}
inline ::pborm::ProcessConf* Config::mutable_process() {
  set_has_process();
  if (process_ == NULL) process_ = new ::pborm::ProcessConf;
  // @@protoc_insertion_point(field_mutable:pborm.Config.process)
  return process_;
}
inline ::pborm::ProcessConf* Config::release_process() {
  clear_has_process();
  ::pborm::ProcessConf* temp = process_;
  process_ = NULL;
  return temp;
}
inline void Config::set_allocated_process(::pborm::ProcessConf* process) {
  delete process_;
  process_ = process;
  if (process) {
    set_has_process();
  } else {
    clear_has_process();
  }
  // @@protoc_insertion_point(field_set_allocated:pborm.Config.process)
}

// optional string meta_path = 100 [default = "./proto"];
inline bool Config::has_meta_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Config::set_has_meta_path() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Config::clear_has_meta_path() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Config::clear_meta_path() {
  if (meta_path_ != _default_meta_path_) {
    meta_path_->assign(*_default_meta_path_);
  }
  clear_has_meta_path();
}
inline const ::std::string& Config::meta_path() const {
  // @@protoc_insertion_point(field_get:pborm.Config.meta_path)
  return *meta_path_;
}
inline void Config::set_meta_path(const ::std::string& value) {
  set_has_meta_path();
  if (meta_path_ == _default_meta_path_) {
    meta_path_ = new ::std::string;
  }
  meta_path_->assign(value);
  // @@protoc_insertion_point(field_set:pborm.Config.meta_path)
}
inline void Config::set_meta_path(const char* value) {
  set_has_meta_path();
  if (meta_path_ == _default_meta_path_) {
    meta_path_ = new ::std::string;
  }
  meta_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:pborm.Config.meta_path)
}
inline void Config::set_meta_path(const char* value, size_t size) {
  set_has_meta_path();
  if (meta_path_ == _default_meta_path_) {
    meta_path_ = new ::std::string;
  }
  meta_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pborm.Config.meta_path)
}
inline ::std::string* Config::mutable_meta_path() {
  set_has_meta_path();
  if (meta_path_ == _default_meta_path_) {
    meta_path_ = new ::std::string(*_default_meta_path_);
  }
  // @@protoc_insertion_point(field_mutable:pborm.Config.meta_path)
  return meta_path_;
}
inline ::std::string* Config::release_meta_path() {
  clear_has_meta_path();
  if (meta_path_ == _default_meta_path_) {
    return NULL;
  } else {
    ::std::string* temp = meta_path_;
    meta_path_ = const_cast< ::std::string*>(_default_meta_path_);
    return temp;
  }
}
inline void Config::set_allocated_meta_path(::std::string* meta_path) {
  if (meta_path_ != _default_meta_path_) {
    delete meta_path_;
  }
  if (meta_path) {
    set_has_meta_path();
    meta_path_ = meta_path;
  } else {
    clear_has_meta_path();
    meta_path_ = const_cast< ::std::string*>(_default_meta_path_);
  }
  // @@protoc_insertion_point(field_set_allocated:pborm.Config.meta_path)
}

// optional uint32 thread_num = 101 [default = 4];
inline bool Config::has_thread_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Config::set_has_thread_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Config::clear_has_thread_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Config::clear_thread_num() {
  thread_num_ = 4u;
  clear_has_thread_num();
}
inline ::google::protobuf::uint32 Config::thread_num() const {
  // @@protoc_insertion_point(field_get:pborm.Config.thread_num)
  return thread_num_;
}
inline void Config::set_thread_num(::google::protobuf::uint32 value) {
  set_has_thread_num();
  thread_num_ = value;
  // @@protoc_insertion_point(field_set:pborm.Config.thread_num)
}

// optional string listen = 102 [default = "tcp://pull:127.0.0.1:8888"];
inline bool Config::has_listen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Config::set_has_listen() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Config::clear_has_listen() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Config::clear_listen() {
  if (listen_ != _default_listen_) {
    listen_->assign(*_default_listen_);
  }
  clear_has_listen();
}
inline const ::std::string& Config::listen() const {
  // @@protoc_insertion_point(field_get:pborm.Config.listen)
  return *listen_;
}
inline void Config::set_listen(const ::std::string& value) {
  set_has_listen();
  if (listen_ == _default_listen_) {
    listen_ = new ::std::string;
  }
  listen_->assign(value);
  // @@protoc_insertion_point(field_set:pborm.Config.listen)
}
inline void Config::set_listen(const char* value) {
  set_has_listen();
  if (listen_ == _default_listen_) {
    listen_ = new ::std::string;
  }
  listen_->assign(value);
  // @@protoc_insertion_point(field_set_char:pborm.Config.listen)
}
inline void Config::set_listen(const char* value, size_t size) {
  set_has_listen();
  if (listen_ == _default_listen_) {
    listen_ = new ::std::string;
  }
  listen_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pborm.Config.listen)
}
inline ::std::string* Config::mutable_listen() {
  set_has_listen();
  if (listen_ == _default_listen_) {
    listen_ = new ::std::string(*_default_listen_);
  }
  // @@protoc_insertion_point(field_mutable:pborm.Config.listen)
  return listen_;
}
inline ::std::string* Config::release_listen() {
  clear_has_listen();
  if (listen_ == _default_listen_) {
    return NULL;
  } else {
    ::std::string* temp = listen_;
    listen_ = const_cast< ::std::string*>(_default_listen_);
    return temp;
  }
}
inline void Config::set_allocated_listen(::std::string* listen) {
  if (listen_ != _default_listen_) {
    delete listen_;
  }
  if (listen) {
    set_has_listen();
    listen_ = listen;
  } else {
    clear_has_listen();
    listen_ = const_cast< ::std::string*>(_default_listen_);
  }
  // @@protoc_insertion_point(field_set_allocated:pborm.Config.listen)
}

// optional string meta_file = 103 [default = "test.proto"];
inline bool Config::has_meta_file() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Config::set_has_meta_file() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Config::clear_has_meta_file() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Config::clear_meta_file() {
  if (meta_file_ != _default_meta_file_) {
    meta_file_->assign(*_default_meta_file_);
  }
  clear_has_meta_file();
}
inline const ::std::string& Config::meta_file() const {
  // @@protoc_insertion_point(field_get:pborm.Config.meta_file)
  return *meta_file_;
}
inline void Config::set_meta_file(const ::std::string& value) {
  set_has_meta_file();
  if (meta_file_ == _default_meta_file_) {
    meta_file_ = new ::std::string;
  }
  meta_file_->assign(value);
  // @@protoc_insertion_point(field_set:pborm.Config.meta_file)
}
inline void Config::set_meta_file(const char* value) {
  set_has_meta_file();
  if (meta_file_ == _default_meta_file_) {
    meta_file_ = new ::std::string;
  }
  meta_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:pborm.Config.meta_file)
}
inline void Config::set_meta_file(const char* value, size_t size) {
  set_has_meta_file();
  if (meta_file_ == _default_meta_file_) {
    meta_file_ = new ::std::string;
  }
  meta_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pborm.Config.meta_file)
}
inline ::std::string* Config::mutable_meta_file() {
  set_has_meta_file();
  if (meta_file_ == _default_meta_file_) {
    meta_file_ = new ::std::string(*_default_meta_file_);
  }
  // @@protoc_insertion_point(field_mutable:pborm.Config.meta_file)
  return meta_file_;
}
inline ::std::string* Config::release_meta_file() {
  clear_has_meta_file();
  if (meta_file_ == _default_meta_file_) {
    return NULL;
  } else {
    ::std::string* temp = meta_file_;
    meta_file_ = const_cast< ::std::string*>(_default_meta_file_);
    return temp;
  }
}
inline void Config::set_allocated_meta_file(::std::string* meta_file) {
  if (meta_file_ != _default_meta_file_) {
    delete meta_file_;
  }
  if (meta_file) {
    set_has_meta_file();
    meta_file_ = meta_file;
  } else {
    clear_has_meta_file();
    meta_file_ = const_cast< ::std::string*>(_default_meta_file_);
  }
  // @@protoc_insertion_point(field_set_allocated:pborm.Config.meta_file)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pborm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pborm_5fconf_2eproto__INCLUDED
